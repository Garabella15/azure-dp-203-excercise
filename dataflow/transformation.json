{
	"name": "transformation",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesS3",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSynapseAnalyticsTable1",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "renaminganddropcolumn"
				},
				{
					"name": "filterfilmbefore1951"
				},
				{
					"name": "DerivedPrimaryGenre"
				},
				{
					"name": "derivedRankingRank"
				},
				{
					"name": "aggregatemoviebyPrimaryGenreAndYear"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as integer,",
				"          title as string,",
				"          genres as string,",
				"          year as short,",
				"          Rating as short,",
				"          {Rotton Tomato} as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          {Rotten Tomatoes} = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> renaminganddropcolumn",
				"renaminganddropcolumn filter(toInteger(year) > 1950) ~> filterfilmbefore1951",
				"filterfilmbefore1951 derive(PrimaryGenre = iif(locate(\"|\",genres)>1,left(genres,locate(\"|\",genres)-1),genres)) ~> DerivedPrimaryGenre",
				"DerivedPrimaryGenre window(over(PrimaryGenre,",
				"          year),",
				"     desc({Rotten Tomatoes}, true),",
				"     RatingsRank = rank()) ~> derivedRankingRank",
				"derivedRankingRank aggregate(groupBy(PrimaryGenre,",
				"          year),",
				"     AverageRating = avg(toInteger({Rotten Tomatoes})),",
				"          HighestRated = first(title),",
				"          LowestRated = last(title),",
				"          NumberOfMovies = count()) ~> aggregatemoviebyPrimaryGenreAndYear",
				"aggregatemoviebyPrimaryGenreAndYear alterRow(insertIf(true())) ~> alterRow1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PrimaryGenre as string,",
				"          Year as integer,",
				"          AverageRatings as integer,",
				"          HighestRated as string,",
				"          LowestRated as string,",
				"          NumberOfMovies as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['PrimaryGenre','Year'],",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     dateFormat:'MM/dd/yyyy',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          PrimaryGenre,",
				"          Year = year,",
				"          AverageRatings = AverageRating,",
				"          HighestRated,",
				"          LowestRated,",
				"          NumberOfMovies",
				"     )) ~> sink1"
			]
		}
	}
}